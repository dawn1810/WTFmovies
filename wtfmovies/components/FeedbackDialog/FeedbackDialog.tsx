import { Send } from '@mui/icons-material';
import {
    AlertColor,
    Button,
    Dialog,
    DialogActions,
    DialogContent,
    DialogContentText,
    DialogTitle,
    FormControlLabel,
    Link,
    Radio,
    RadioGroup,
    TextField,
} from '@mui/material';
import { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { changeFbDialog, changeNotifyContent, changeNotifyOpen, changeNotifyType } from '~/redux/actions';
import { headerSelector } from '~/redux/selectors';

export default function FormDialog() {
    const dispatch = useDispatch();
    const state = useSelector(headerSelector);

    const [content, setContent] = useState('');
    const [violate, setViolate] = useState();

    const showAlert = (content: string, type: AlertColor) => {
        dispatch(changeNotifyContent(content));
        dispatch(changeNotifyType(type));
        dispatch(changeNotifyOpen(true));
    };

    const handleClose = () => {
        dispatch(changeFbDialog(false));
        setContent('');
        setViolate(undefined);
    };

    const handleContentChange = (event: any) => {
        setContent(event.target.value);
    };

    const handleRatioChange = (event: any) => {
        setViolate(event.target.value);
    };

    const handleSendFeedback = async () => {
        const response = await fetch('/api/v1/sendReport', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content, type: state.fbDialogType }),
        });

        if (response.ok) {
            handleClose();
            showAlert('√ù ki·∫øn ph·∫£n h·ªìi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n, C·∫£m ∆°n v√¨ s·ª± g√≥p √Ω c·ªßa b·∫°n üòΩüòΩüòΩ!', 'success');
        } else if (response.status === 500) {
            showAlert('L·ªói, h√£y b√°o c√°o l·∫°i v·ªõi ch√∫ng t√¥i c·∫£m ∆°n', 'error');
        }
    };

    const handleSendReport = async () => {
        const reportContent =
            'B√°o c√°o vi ph·∫°m ' + state.rpContent + '<br/>N·ªôi dung:<br/> ' + violate + '<br/>M√¥ t·∫£:<br/> ' + content;

        const response = await fetch('/api/v1/sendReport', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content: reportContent, type: state.fbDialogType }),
        });

        if (response.ok) {
            handleClose();
            showAlert('√ù ki·∫øn ph·∫£n h·ªìi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n, C·∫£m ∆°n v√¨ s·ª± g√≥p √Ω c·ªßa b·∫°n üòΩüòΩüòΩ!', 'success');
        } else if (response.status === 500) {
            showAlert('L·ªói, h√£y b√°o c√°o l·∫°i v·ªõi ch√∫ng t√¥i c·∫£m ∆°n', 'error');
        }
    };

    return (
        <Dialog open={state.fbDialog} onClose={handleClose}>
            <DialogTitle>{state.fbDialogType === 'feedback' ? '√ù ki·∫øn ph·∫£n h·ªìi' : 'B√°o c√°o vi ph·∫°m'}</DialogTitle>
            <DialogContent style={{ minWidth: 500 }}>
                {state.fbDialogType === 'feedback' ? (
                    <>
                        <DialogContentText>{'M√¥ t·∫£ √Ω ki·∫øn ph·∫£n h·ªìi c·ªßa b·∫°n'}</DialogContentText>
                        <TextField
                            autoFocus
                            required
                            margin="dense"
                            fullWidth
                            multiline
                            spellCheck={false}
                            value={content}
                            rows={5}
                            placeholder="Nh·∫≠p n·ªôi dung √Ω ki·∫øn ph·∫£n h·ªìi c·ªßa b·∫°n"
                            onChange={handleContentChange}
                        />
                        <DialogContentText>
                            *B·∫°n c√≥ th·ªÉ li·ªán h·ªá v·ªõi ch√∫ng t√¥i qua email <Link>support@wtfdev.xyz</Link>
                        </DialogContentText>
                    </>
                ) : (
                    <>
                        <RadioGroup
                            aria-labelledby="demo-radio-buttons-group-label"
                            value={violate}
                            name="radio-buttons-group"
                            onChange={handleRatioChange}
                        >
                            <FormControlLabel
                                value="N·ªôi dung r√°c ho·∫∑c n·ªôi dung qu·∫£ng c√°o kh√¥ng mong mu·ªën"
                                control={<Radio />}
                                label="N·ªôi dung r√°c ho·∫∑c n·ªôi dung qu·∫£ng c√°o kh√¥ng mong mu·ªën"
                            />
                            <FormControlLabel
                                value="T√†i li·ªáu khi√™u d√¢m ho·∫∑c phim khi√™u d√¢m"
                                control={<Radio />}
                                label="T√†i li·ªáu khi√™u d√¢m ho·∫∑c phim khi√™u d√¢m"
                            />
                            <FormControlLabel value="X√¢m h·∫°i tr·∫ª em" control={<Radio />} label="X√¢m h·∫°i tr·∫ª em" />
                            <FormControlLabel
                                value="L·ªùi n√≥i cƒÉm th√π ho·∫∑c h√¨nh ·∫£nh b·∫°o l·ª±c"
                                control={<Radio />}
                                label="L·ªùi n√≥i cƒÉm th√π ho·∫∑c h√¨nh ·∫£nh b·∫°o l·ª±c"
                            />
                            <FormControlLabel
                                value="N·ªôi dung qu·∫£ng b√° ch·ªß nghƒ©a kh·ªßng b·ªë"
                                control={<Radio />}
                                label="N·ªôi dung qu·∫£ng b√° ch·ªß nghƒ©a kh·ªßng b·ªë"
                            />
                            <FormControlLabel value={6} control={<Radio />} label="N·ªôi dung qu·∫•y r·ªëi ho·∫∑c b·∫Øt n·∫°t" />
                            <FormControlLabel
                                value="N·ªôi dung gian l√¢n/vi ph·∫°m g√¢y hi·ªÉu l·∫ßm"
                                control={<Radio />}
                                label="N·ªôi dung gian l√¢n/vi ph·∫°m g√¢y hi·ªÉu l·∫ßm"
                            />
                            <FormControlLabel
                                value="Th√¥ng tin sai l·ªách"
                                control={<Radio />}
                                label="Th√¥ng tin sai l·ªách"
                            />
                            <FormControlLabel value="Kh√°c" control={<Radio />} label="Kh√°c" />
                        </RadioGroup>
                        <DialogContentText>{'M√¥ t·∫£ b√°o c√°o c·ªßa b·∫°n n·∫øu c√≥'}</DialogContentText>
                        <TextField
                            autoFocus
                            required
                            margin="dense"
                            fullWidth
                            multiline
                            spellCheck={false}
                            value={content}
                            rows={3}
                            placeholder="Nh·∫≠p m√¥ t·∫£ b√°o c√°o c·ªßa b·∫°n"
                            onChange={handleContentChange}
                        />
                    </>
                )}
            </DialogContent>
            <DialogActions>
                <Button onClick={handleClose}>Hu·ª∑</Button>
                <Button
                    variant="contained"
                    endIcon={<Send />}
                    onClick={state.fbDialogType === 'feedback' ? handleSendFeedback : handleSendReport}
                >
                    Send
                </Button>
            </DialogActions>
        </Dialog>
    );
}
